{
  // see https://www.typescriptlang.org/tsconfig to better understand tsconfigs
  "include": [
    "src",
    "types"
  ],
  "compilerOptions": {
    // "incremental": true,
    "target": "es6",
    // "outDir": "build/main",
    // "inlineSourceMap": true,
    // "resolveJsonModule": true /* Include modules imported with .json extension. */,
    /* Debugging Options */
    // "traceResolution": false /* Report module resolution log messages. */,
    // "listEmittedFiles": false /* Print names of generated files part of the compilation. */,
    // "listFiles": false /* Print names of files part of the compilation. */,
    // "pretty": true /* Stylize errors and messages using color and context. */,
    // /* Experimental Options */
    // "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,
    "module": "esnext",
    "lib": [
      "dom",
      "esnext"
    ],
    "importHelpers": true,
    // output .d.ts declaration files for consumers
    "declaration": true,
    // output .js.map sourcemap files for consumers
    "sourceMap": true,
    // match output dir to input dir. e.g. dist/index instead of dist/src/index
    "rootDir": "./src",
    // stricter type-checking for stronger correctness. Recommended by TS
    "strict": false, // turn off temporarily
    // linter checks for common issues
    "noImplicitReturns": false, // turn off temporarily
    "noFallthroughCasesInSwitch": true,
    // noUnused* overlap with @typescript-eslint/no-unused-vars, can disable if duplicative
    "noUnusedLocals": false, // turn off temporarily
    "noUnusedParameters": false, // turn off temporarily
    // use Node's module resolution algorithm, instead of the legacy TS one
    "moduleResolution": "node",
    // transpile JSX to React.createElement
    "jsx": "react",
    // interop between ESM and CJS modules. Recommended by TS
    "esModuleInterop": true,
    // significant perf increase by skipping checking .d.ts files, particularly those in node_modules. Recommended by TS
    "skipLibCheck": true,
    // error out if import and file system have a casing mismatch. Recommended by TS
    "forceConsistentCasingInFileNames": true,
    // `tsdx build` ignores this option, but it is commonly used when type-checking separately with `tsc`
    "noEmit": true,
  }
}